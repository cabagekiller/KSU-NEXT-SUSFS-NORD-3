name: Android Kernel CI

on:
  workflow_dispatch:
    inputs:
      KSUNEXT_ENABLED:
        description: 'Enable KernelSU Next integration'
        required: false
        default: false
        type: boolean
      SUSFS_ENABLED:
        description: 'Enable SUSFS integration'
        required: false
        default: false
        type: boolean
      ANDROID_VERSION:
        description: 'Android version (e.g., 13, 14)'
        required: false
        default: 'android13'
        type: string
      KERNEL_VERSION:
        description: 'Kernel version (e.g., 5.10, 5.15)'
        required: false
        default: '5.10'
        type: string

env:
  TOOLCHAIN_VERSION: "aarch64-linux-android-4.9"
  DEFCONFIG: "oneplus/mt6983_v_15.0.0_nord_3_defconfig"
  MAKE_FLAGS: "-j$(nproc --all)"
  ARTIFACT_NAME: "kernel-$(date +'%Y%m%d-%H%M%S')"

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 150
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Set up build environment
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          git-core gnupg flex bison build-essential zip curl zlib1g-dev \
          gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev \
          x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev \
          libxml2-utils xsltproc unzip fontconfig python3 bc cpio rsync \
          ccache libssl-dev patch

    - name: Checkout kernel source
      uses: actions/checkout@v4
      with:
        repository: OnePlusOSS/android_kernel_5.10_oneplus_mt6983
        ref: oneplus/mt6983_v_15.0.0_nord_3
        path: kernel_source
        submodules: recursive
        fetch-depth: 1

    - name: Get OPlus modules
      run: |
        git clone --depth=1 \
          https://github.com/OnePlusOSS/android_kernel_modules_oneplus_mt6983.git \
          -b oneplus/mt6983_v_15.0.0_nord_3 \
          oplus_modules
        cp -r oplus_modules/* kernel_source/

    - name: Set up ccache
      uses: actions/cache@v3
      with:
        path: ~/.ccache
        key: ${{ runner.os }}-ccache-${{ env.TOOLCHAIN_VERSION }}-${{ hashFiles('kernel_source/**/Makefile') }}
        restore-keys: |
          ${{ runner.os }}-ccache-${{ env.TOOLCHAIN_VERSION }}-

    - name: Check for toolchain cache
      uses: actions/cache@v3
      id: toolchain-cache
      with:
        path: toolchain/${{ env.TOOLCHAIN_VERSION }}
        key: ${{ runner.os }}-toolchain-${{ env.TOOLCHAIN_VERSION }}-${{ hashFiles('kernel_source/**/Makefile') }}
        restore-keys: |
          ${{ runner.os }}-toolchain-${{ env.TOOLCHAIN_VERSION }}-
          
    - name: Download toolchain
      if: steps.toolchain-cache.outputs.cache-hit != 'true'
      run: |
        mkdir -p toolchain
        cd toolchain
        # Use prebuilt toolchain from ARM instead
        wget https://developer.arm.com/-/media/Files/downloads/gnu-a/10.3-2021.07/binrel/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu.tar.xz
        tar xf gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu.tar.xz
        mv gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu aarch64-linux-android-4.9
        cd aarch64-linux-android-4.9
        # Verify compiler
        if [ -f "bin/aarch64-none-linux-gnu-gcc" ]; then
          echo "Compiler found at $(pwd)/bin/aarch64-none-linux-gnu-gcc"
          # Create symlinks for expected names
          ln -s aarch64-none-linux-gnu-gcc bin/aarch64-linux-android-gcc
          ln -s aarch64-none-linux-gnu-g++ bin/aarch64-linux-android-g++
        else
          echo "ERROR: Compiler not found!"
          find . -name "*gcc*"
          exit 1
        fi

    - name: Set up KernelSU Next
      if: ${{ inputs.KSUNEXT_ENABLED }}
      working-directory: kernel_source
      run: |
        curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -s next-susfs-dev
        cd KernelSU-Next
        KSU_VERSION=$(expr $(git rev-list --count HEAD) "+" 10200)
        echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
        sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
        cd ..

    - name: Set up SUSFS
      if: ${{ inputs.SUSFS_ENABLED }}
      working-directory: kernel_source
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
        git clone https://github.com/cabagekiller/kernel_patches.git
        #cp susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./KernelSU-Next/
        cp susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch ./
        #cp kernel_patches/KernelSU-Next-Implement-SUSFS-v1.5.5-Universal.patch ./KernelSU-Next/
        cp susfs4ksu/kernel_patches/fs/* ./fs/
        cp susfs4ksu/kernel_patches/include/linux/* ./include/linux/
        
        # Apply patches
        cd ./KernelSU-Next
        #patch -p1 < KernelSU-Next-Implement-SUSFS-v1.5.5-Universal.patch || true
        #patch -p1 --forward < 10_enable_susfs_for_ksu.patch || true
        cd ..
        patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch || true
        cp kernel_patches/69_hide_stuff.patch ./
        cp kernel_patches/next/syscall_hooks.patch ./
        patch -p1 -F 3 < 69_hide_stuff.patch || true
        patch -p1 -F 3 < syscall_hooks.patch || true
        git add -A && git commit -a -m "BUILD Kernel: Added SUSFS patches" || true
        git add -A && git commit -a -m "BUILD Kernel: SUSFS changes" || true

    - name: Configure Kernel Defconfig
      if: ${{ inputs.KSUNEXT_ENABLED || inputs.SUSFS_ENABLED }}
      working-directory: kernel_source
      run: |
        # Basic KernelSU and SUSFS configs
        echo "CONFIG_KSU=y" >> ./arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS=y" >> ./arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> ./arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_WITH_KPROBES=n" >> ./arch/arm64/configs/gki_defconfig
        echo "CONFIG_COMPAT=y" >> ./arch/arm64/configs/gki_defconfig
        # Add additional tmpfs config setting
        echo "CONFIG_TMPFS_XATTR=y" >> ./arch/arm64/configs/gki_defconfig
        echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./arch/arm64/configs/gki_defconfig
        # Add additional tmpfs config setting
        echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./arch/arm64/configs/gki_defconfig
        echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./arch/arm64/configs/gki_defconfig
        echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./arch/arm64/configs/gki_defconfig
        
        # Remove defconfig check if SUSFS is enabled
        if ${{ inputs.SUSFS_ENABLED }}; then
          sed -i '2s/check_defconfig//' ./build.config.gki || true
        fi


    - name: Set up build environment variables
      run: |
        echo "ARCH=arm64" >> $GITHUB_ENV
        echo "CROSS_COMPILE=$(pwd)/toolchain/${{ env.TOOLCHAIN_VERSION }}/bin/aarch64-none-linux-gnu-" >> $GITHUB_ENV
        echo "PATH=$(pwd)/toolchain/${{ env.TOOLCHAIN_VERSION }}/bin:$PATH" >> $GITHUB_ENV
        echo "CCACHE_DIR=$(pwd)/.ccache" >> $GITHUB_ENV
        echo "USE_CCACHE=1" >> $GITHUB_ENV
        echo "CCACHE_EXEC=/usr/bin/ccache" >> $GITHUB_ENV
        
        # Verify setup
        echo "Compiler path: $(pwd)/toolchain/${{ env.TOOLCHAIN_VERSION }}/bin/aarch64-none-linux-gnu-gcc"
        $(pwd)/toolchain/${{ env.TOOLCHAIN_VERSION }}/bin/aarch64-none-linux-gnu-gcc --version || (echo "Compiler test failed!" && exit 1)
        
    - name: Show environment info
      working-directory: kernel_source
      run: |
        echo "Toolchain path: $(pwd)/toolchain/${{ env.TOOLCHAIN_VERSION }}/bin"
        echo "CCACHE stats:"
        ccache -s
        if [ -n "$KSUVER" ]; then
          echo "KernelSU Next version: $KSUVER"
        fi
        if ${{ inputs.SUSFS_ENABLED }}; then
          echo "SUSFS enabled for Android ${{ github.event.inputs.ANDROID_VERSION }}, Kernel ${{ github.event.inputs.KERNEL_VERSION }}"
          echo "Modified defconfig with SUSFS settings"
        fi
    - name: Make defconfig
      working-directory: kernel_source
      run: |
        # Verify environment
        echo "Current PATH: $PATH"
        echo "CROSS_COMPILE: $CROSS_COMPILE"
        which aarch64-linux-android-gcc
        aarch64-linux-android-gcc --version
        
        # Create output directory and copy config
        mkdir -p out
        cp arch/arm64/configs/gki_defconfig out/.config
        
        # Apply any modifications
        if [ -n "$(grep 'CONFIG_KSU=y' out/.config)" ]; then
          echo "KernelSU config already present"
        else
          echo "Applying KernelSU config"
          echo "CONFIG_KSU=y" >> out/.config
        fi
        
        # Finalize config
        make O=out olddefconfig

    - name: Build kernel
      working-directory: kernel_source
      run: |
        make O=out ${{ env.MAKE_FLAGS }} 2>&1 | tee build.log
        

    - name: Prepare kernel image
      working-directory: kernel_source
      run: |
        mkdir -p kernel_output
        cp out/arch/arm64/boot/Image.gz-dtb kernel_output/Image.gz-dtb
        # Decompress if needed (some devices need uncompressed Image)
        gunzip -kf kernel_output/Image.gz-dtb || true
        mv kernel_output/Image.gz-dtb kernel_output/Image 2>/dev/null || true

    - name: Set up AnyKernel3
      run: |
        git clone https://github.com/TanakaLun/AnyKernel3 --depth=1
        rm -rf ./AnyKernel3/.git
        # Copy kernel image
        cp kernel_output/Image* ./AnyKernel3/
        # Add version info
        echo "kernel.string=KernelSU Next v${KSUVER} ${FEIL}" >> ./AnyKernel3/anykernel.sh
        echo "device.name1=OnePlus Nord 3" >> ./AnyKernel3/anykernel.sh
        # Modify anykernel.sh for our device
        sed -i 's/do.devicecheck=1/do.devicecheck=0/' ./AnyKernel3/anykernel.sh
        sed -i 's/do.modules=1/do.modules=0/' ./AnyKernel3/anykernel.sh

    - name: Package AnyKernel3 zip
      run: |
        cd AnyKernel3
        zip -r9 ../AnyKernel3_KernelSU_Next_${KSUVER}_${FEIL}.zip * -x .git*
        cd ..

    - name: Upload AnyKernel3 zip
      uses: actions/upload-artifact@v4
      with:
        name: AnyKernel3_KernelSU_Next_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}
        path: ./AnyKernel3_KernelSU_Next_*.zip

    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: |
          out/arch/arm64/boot/Image.gz-dtb
          out/.config
          build.log
          kernel_output/*

    - name: Upload build log on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-failure-log
        path: build.log
